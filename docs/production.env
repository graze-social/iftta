# =============================================================================
# PRODUCTION CONFIGURATION TEMPLATE FOR IFTHISTHENAT
# =============================================================================
# 
# Copy this file to your project root as .env and configure all values
# 
# Security Warning: 
# - Replace ALL placeholder values with actual production values
# - Never commit this file with real credentials to version control
# - Keep this file secure with appropriate file permissions (600)
# =============================================================================

# -----------------------------------------------------------------------------
# REQUIRED CORE CONFIGURATION - MUST BE CONFIGURED
# -----------------------------------------------------------------------------

# External base URL - REQUIRED - must be accessible from the internet
EXTERNAL_BASE=https://your-domain.com

# HTTP server configuration
HTTP_PORT=8080
HTTP_STATIC_PATH=/app/static

# Secure cookie key - REQUIRED - generate with: openssl rand -base64 66
# Must be exactly 88 base64 characters (66 bytes)
HTTP_COOKIE_KEY=REPLACE_WITH_SECURE_BASE64_COOKIE_KEY_88_CHARS_GENERATED_WITH_OPENSSL_RAND_BASE64_66

# Database connection - REQUIRED
DATABASE_URL=postgres://ifthisthenat_user:REPLACE_WITH_SECURE_PASSWORD@postgres:5432/ifthisthenat

# ATProtocol configuration - REQUIRED
ISSUER_DID=did:plc:REPLACE_WITH_YOUR_ISSUER_DID
PLC_HOSTNAME=plc.directory

# OAuth configuration - REQUIRED
AIP_HOSTNAME=https://your-aip-provider.com
AIP_CLIENT_ID=REPLACE_WITH_YOUR_OAUTH_CLIENT_ID
AIP_CLIENT_SECRET=REPLACE_WITH_YOUR_OAUTH_CLIENT_SECRET

# OAuth scopes define what permissions your service will have when users authenticate
# These scopes determine access to different parts of the ATProtocol ecosystem:
# - "openid" - OpenID Connect basic profile
# - "email" - User's email address
# - "profile" - User's profile information  
# - "atproto" - ATProtocol specific permissions
# - "account:email" - Allows the identity email address to be read from their PDS
# - "repo:*" - Full repository access (allows publishing to any collection)
# - "repo:{collection}" - Access to specific collection (e.g., repo:app.bsky.feed.post)
# - "transition:generic" - Transition scope with broad permissions
#
# IMPORTANT: OAuth scopes are validated at startup against ALLOWED_PUBLISH_COLLECTIONS
# If publish_record node type is enabled, OAuth scopes must include repository permissions
# Either use "repo:*" or "transition:generic" for full access, or include specific
# "repo:{collection}" scopes for each collection in ALLOWED_PUBLISH_COLLECTIONS
#
# Be mindful that requesting excessive scopes may reduce user trust, while 
# requesting insufficient scopes will limit your service's functionality.
# Default: "openid email profile atproto account:email"
AIP_OAUTH_SCOPE=openid email profile atproto account:email

# -----------------------------------------------------------------------------
# POSTGRESQL DATABASE CONFIGURATION
# -----------------------------------------------------------------------------

POSTGRES_DB=ifthisthenat
POSTGRES_USER=ifthisthenat_user
POSTGRES_PASSWORD=REPLACE_WITH_SECURE_DATABASE_PASSWORD
POSTGRES_PORT=5432

# -----------------------------------------------------------------------------
# REDIS CONFIGURATION (Optional but recommended for production)
# -----------------------------------------------------------------------------

# Uncomment to enable Redis for distributed queuing and cursor storage
REDIS_URL=redis://redis:6379
# Redis key for Jetstream cursor storage - Default: "ifthisthenat:jetstream:cursor"
REDIS_CURSOR_KEY=ifthisthenat:jetstream:cursor
# Redis cursor TTL in seconds - Default: 86400 (24 hours)
REDIS_CURSOR_TTL_SECONDS=86400

# -----------------------------------------------------------------------------
# JETSTREAM CONFIGURATION
# -----------------------------------------------------------------------------

JETSTREAM_ENABLED=true
JETSTREAM_HOSTNAME=jetstream2.us-east.bsky.network

# Collections to monitor (comma-separated, leave empty for all)
JETSTREAM_COLLECTIONS=

# Instance configuration for distributed processing
# Instance ID (must be less than total instances) - Default: 0
JETSTREAM_INSTANCE_ID=0
# Total number of instances - Default: 1
JETSTREAM_TOTAL_INSTANCES=1
# Worker threads per instance - Default: 1
JETSTREAM_WORKER_THREADS=2

# Partition strategy: did, collection, round-robin, or custom:{field} - Default: did
JETSTREAM_PARTITION_STRATEGY=did

# File-based cursor storage (alternative to Redis)
# JETSTREAM_CURSOR_PATH=/app/data/cursor.json

# -----------------------------------------------------------------------------
# BLUEPRINT QUEUE CONFIGURATION
# -----------------------------------------------------------------------------

# Queue type: "mpsc" for single instance, "redis" for distributed - Default: "mpsc"
BLUEPRINT_QUEUE_ADAPTER=mpsc
# MPSC queue buffer size - Default: 5000
BLUEPRINT_QUEUE_BUFFER_SIZE=5000

# Redis queue settings (if using BLUEPRINT_QUEUE_ADAPTER=redis)
BLUEPRINT_QUEUE_REDIS_PREFIX=queue:blueprint:
BLUEPRINT_QUEUE_REDIS_WORKER_ID=worker-001

# Queue monitoring and reliability
BLUEPRINT_QUEUE_HEALTH_CHECK=true
BLUEPRINT_QUEUE_HEALTH_INTERVAL=60
BLUEPRINT_QUEUE_MAX_RETRIES=3

# -----------------------------------------------------------------------------
# WEBHOOK PROCESSING CONFIGURATION
# -----------------------------------------------------------------------------

# Enable async webhook queue processing - Default: false
WEBHOOK_QUEUE_ENABLED=true
# Maximum concurrent webhook requests - Default: 10
WEBHOOK_MAX_CONCURRENT=10
# Default webhook timeout in milliseconds - Default: 30000 (30 seconds)
WEBHOOK_DEFAULT_TIMEOUT_MS=30000
# Maximum retry attempts for failed webhooks - Default: 3
WEBHOOK_MAX_RETRIES=3
# Initial retry delay in milliseconds - Default: 1000 (1 second)
WEBHOOK_RETRY_DELAY_MS=1000
# Log webhook request/response bodies - Default: false
WEBHOOK_LOG_BODIES=false
# Size of the webhook work queue - Default: 1000
WEBHOOK_QUEUE_SIZE=1000

# -----------------------------------------------------------------------------
# CACHING AND PERFORMANCE
# -----------------------------------------------------------------------------

# Identity resolution cache size - Default: 1000
IDENTITY_CACHE_SIZE=10000
# Identity cache TTL in minutes - Default: 30
IDENTITY_CACHE_TTL_MINUTES=30
# Blueprint cache reload interval in seconds - Default: 30
BLUEPRINT_CACHE_RELOAD_SECONDS=30
# HTTP client timeout in seconds - Default: 8
HTTP_CLIENT_TIMEOUT=30

# -----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# -----------------------------------------------------------------------------

# Admin access (semicolon-separated DID list)
ADMIN_DIDS=did:plc:REPLACE_WITH_ADMIN_DID_1;did:plc:REPLACE_WITH_ADMIN_DID_2

# Disabled node types - prevents blueprints containing these node types from evaluating
# Comma-separated list of node type constants (leave empty to allow all node types)
# Valid node types: jetstream_entry, webhook_entry, periodic_entry, condition, transform, 
#                   facet_text, publish_record, publish_webhook, debug_action
# Examples: webhook_entry,publish_webhook,debug_action
# Note: If webhook_entry is disabled, the /webhooks/{blueprint_id} HTTP endpoint will not be registered
# DISABLED_NODE_TYPES=

# Collection constraints for publish_record nodes (comma-separated, leave empty to allow all)
# When specified, publish_record nodes can only publish to these collections
# OAuth scopes must include 'repo:{collection}' permission for each allowed collection
# Examples: app.bsky.feed.post,app.bsky.feed.like,app.bsky.social.follow
# ALLOWED_PUBLISH_COLLECTIONS=

# Scheduler configuration for periodic entry nodes
# Enable scheduler - Default: false
SCHEDULER_ENABLED=false
# Check interval for ready blueprints in seconds - Default: 10
SCHEDULER_CHECK_INTERVAL_SECS=10
# Blueprint cache reload interval in seconds - Default: 60
SCHEDULER_CACHE_RELOAD_SECS=60
# Maximum concurrent blueprint evaluations - Default: 5
SCHEDULER_MAX_CONCURRENT=5
# Enable detailed scheduler logging - Default: false
# SCHEDULER_DEBUG_LOGGING=false

# -----------------------------------------------------------------------------
# LEADERSHIP ELECTION CONFIGURATION
# -----------------------------------------------------------------------------

# Leadership election for distributed task coordination
# Different tasks can have independent leadership elections using different keys
# All leadership settings support task-specific prefixes:
# - BLUEPRINT_LEADERSHIP_* for blueprint evaluation
# - WEBHOOK_LEADERSHIP_* for webhook processing  
# - SCHEDULER_LEADERSHIP_* for periodic task scheduling
# Fallback to generic LEADERSHIP_* settings if task-specific not set

# Global leadership configuration (applies to all tasks unless overridden)
# Redis key used for leadership election coordination
LEADERSHIP_ELECTION_KEY=ifthisthenat:leadership:default

# How often to retry acquiring leadership when not leader (minimum: 5 seconds)
LEADERSHIP_RETRY_INTERVAL_SECS=30

# How long leadership lasts without renewal (minimum: 30 seconds)
# Leaders must maintain heartbeat within this time period
# Should be at least 3x the retry interval for reliable operation
LEADERSHIP_TTL_SECS=120

# Unique identifier for this instance (auto-generated if not specified)
# LEADERSHIP_INSTANCE_ID=instance-001

# Blueprint evaluation leadership configuration
# Enable/disable leadership election for blueprint evaluation
BLUEPRINT_LEADERSHIP_ENABLED=false
# BLUEPRINT_LEADERSHIP_ELECTION_KEY=ifthisthenat:leadership:blueprint_evaluation
# BLUEPRINT_LEADERSHIP_RETRY_INTERVAL_SECS=30
# BLUEPRINT_LEADERSHIP_TTL_SECS=120
# BLUEPRINT_LEADERSHIP_INSTANCE_ID=blueprint-001

# Webhook processor leadership configuration  
# Enable/disable leadership election for webhook processing
WEBHOOK_LEADERSHIP_ENABLED=false
# WEBHOOK_LEADERSHIP_ELECTION_KEY=ifthisthenat:leadership:webhook_processor
# WEBHOOK_LEADERSHIP_RETRY_INTERVAL_SECS=30
# WEBHOOK_LEADERSHIP_TTL_SECS=120
# WEBHOOK_LEADERSHIP_INSTANCE_ID=webhook-001

# Scheduler leadership configuration
# Enable/disable leadership election for periodic task scheduling
SCHEDULER_LEADERSHIP_ENABLED=false
# SCHEDULER_LEADERSHIP_ELECTION_KEY=ifthisthenat:leadership:scheduler
# SCHEDULER_LEADERSHIP_RETRY_INTERVAL_SECS=30
# SCHEDULER_LEADERSHIP_TTL_SECS=120
# SCHEDULER_LEADERSHIP_INSTANCE_ID=scheduler-001

# -----------------------------------------------------------------------------
# MONITORING AND OBSERVABILITY
# -----------------------------------------------------------------------------

# Error tracking with Sentry (optional but recommended)
# SENTRY_DSN=https://REPLACE_WITH_YOUR_SENTRY_DSN@sentry.io/project-id
# SENTRY_ENVIRONMENT=production  # Default: "development" (falls back to ENV or ENVIRONMENT vars)
# SENTRY_TRACES_SAMPLE_RATE=0.1  # Default: 0.1 (10% of traces, clamped to 0.0-1.0)
# SENTRY_DEBUG=false  # Default: false

# Logging configuration
RUST_LOG=ifthisthenat=info,warn,error
RUST_BACKTRACE=1

# User agent for HTTP requests - Default: ifthisthenat/{version}
USER_AGENT=ifthisthenat/1.0.0

# -----------------------------------------------------------------------------
# DEVELOPMENT OPTIONS (disable in production)
# -----------------------------------------------------------------------------

# Git hash is set automatically during Docker build
# GIT_HASH=automatically-set-during-build

# =============================================================================
# CONFIGURATION CHECKLIST
# =============================================================================
# 
# Before deploying, ensure you have:
# 
# ✓ Replaced EXTERNAL_BASE with your actual domain
# ✓ Generated and set HTTP_COOKIE_KEY with: openssl rand -base64 66
# ✓ Set DATABASE_URL with secure credentials
# ✓ Configured ISSUER_DID with your ATProtocol DID
# ✓ Set OAuth credentials (AIP_HOSTNAME, AIP_CLIENT_ID, AIP_CLIENT_SECRET)
# ✓ Configured AIP_OAUTH_SCOPE with appropriate repository permissions
# ✓ Validated OAuth scopes are compatible with ALLOWED_PUBLISH_COLLECTIONS
# ✓ Generated secure POSTGRES_PASSWORD
# ✓ Configured ADMIN_DIDS with authorized administrator DIDs
# ✓ Reviewed DISABLED_NODE_TYPES for security requirements
# ✓ Set ALLOWED_PUBLISH_COLLECTIONS if collection constraints are needed
# ✓ Reviewed and adjusted performance settings for your environment
# ✓ Set up monitoring with SENTRY_DSN if using Sentry
# ✓ Verified Redis configuration if using distributed queuing
# ✓ Configured scheduler settings if using periodic entry nodes
# ✓ Configured task-specific leadership elections for distributed deployments
# ✓ Verified Redis is available for leadership election coordination
# ✓ Set BLUEPRINT_LEADERSHIP_ENABLED=true if running multiple blueprint processors
# ✓ Set WEBHOOK_LEADERSHIP_ENABLED=true if running multiple webhook processors
# ✓ Set SCHEDULER_LEADERSHIP_ENABLED=true if running multiple scheduler instances
#
# Security reminders:
# ✓ Set file permissions to 600: chmod 600 .env
# ✓ Never commit this file with real credentials to version control
# ✓ Regularly rotate secrets and passwords
# ✓ Use HTTPS/TLS in production
# ✓ Monitor logs for security events
# ✓ Validate OAuth scope and collection constraint compatibility
# ✓ Use unique LEADERSHIP_INSTANCE_ID values for each instance
# =============================================================================